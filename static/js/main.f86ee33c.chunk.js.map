{"version":3,"sources":["components/AppHeader.js","components/ListItem.js","components/ListView.js","components/NewItemView.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","Jumbotron","className","to","Button","color","outline","block","ListItem","props","toggle","ev","item","state","status","setState","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","detail","handleEdit","id","handleCancel","handleDelete","window","confirm","this","Col","sm","Card","CardBody","CardTitle","CardText","onClick","Form","FormGroup","Label","for","Input","type","placeholder","onChange","React","Component","ListView","Container","Row","items","map","key","NewItemView","handleAdd","cuid","history","push","alert","App","buildList","data","list","localStorage","setItem","JSON","stringify","addItem","newList","concat","editItem","index","findIndex","e","deleteItem","targetItem","filter","_list","getItem","parse","basename","path","render","exact","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f86ee33c.chunk.js","sourcesContent":["// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Jumbotron, Button } from 'reactstrap';\n\nconst AppHeader = () => {\n  return (\n    <Jumbotron>\n      <h1 className=\"display-3\">React CRUD List</h1>\n      <p className=\"lead\">\n      <NavLink to='/item' className=\"App-link\"><Button  color=\"primary\" outline block={false}>Add Item</Button></NavLink>\n      </p>\n    </Jumbotron>\n  )\n}\n\nexport default AppHeader\n\n\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport { Col, Card, CardText, CardBody, CardTitle, Form, Button, FormGroup, Label, Input } from 'reactstrap';\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: props.item.id,\n      name: props.item.name,\n      detail: props.item.detail,\n      status: props.item.status\n    }\n  }\n\n  toggle = (ev) => {\n    let item = { ...this.state }\n    item.status = (item.status === 'read') ? 'edit' : 'read'\n    this.setState({ ...item })\n  }\n  handleInputChange = event => {\n    const { name, value } = event.target\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    if (!this.state.name || !this.state.detail) return\n\n    this.setState({ status: 'read' })\n\n    this.props.handleEdit({\n      id: this.state.id,\n      name: this.state.name,\n      detail: this.state.detail,\n      status: 'read'\n    })\n  };\n\n  handleCancel = event => {\n    this.setState({\n      status: 'read', name: this.props.item.name,\n      detail: this.props.item.detail,\n    })\n  }\n  handleDelete = event => {\n    if (window.confirm(\"Do you want to remove the item?\")) {\n      this.props.handleDelete(this.props.item)\n    }\n  }\n\n  render() {\n    return (\n      (this.state.status === 'read') ?\n        <Col sm='6'>\n          <Card>\n            <CardBody>\n              <CardTitle>{this.props.item.name}</CardTitle>\n              <CardText>{this.props.item.detail}</CardText>\n              <div><Button outline color=\"success\" onClick={this.toggle}>Edit</Button>\n                <Button outline color=\"danger\" onClick={this.handleDelete}>Delete</Button>\n\n              </div>\n            </CardBody>\n          </Card>\n        </Col>\n        :\n        <Col sm='6'>\n          <Form className='form'>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Label for=\"itemName\" className=\"mr-sm-2\">Name</Label>\n              <Input type=\"text\" name=\"name\" id=\"itemName\" placeholder=\"Item name\" value={this.state.name} onChange={this.handleInputChange} />\n            </FormGroup>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Label for=\"itemDetail\" className=\"mr-sm-2\">Detail</Label>\n              <Input type=\"textarea\" name=\"detail\" id=\"itemDetail\" placeholder=\"Item detail\" value={this.state.detail} onChange={this.handleInputChange} />\n            </FormGroup>\n            <Button outline color=\"success\" onClick={this.handleFormSubmit}>Save</Button>\n            <Button outline onClick={this.handleCancel}>Cancel</Button>\n          </Form>\n        </Col>\n    )\n  }\n}\n\nexport default ListItem\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport ListItem from './ListItem'\nimport { Container, Row} from 'reactstrap';\n\n\nfunction ListView(props) {\n  return (\n      <Container className=\"container\">\n        <Row>\n          {props.items && props.items.map((item) => (\n            <ListItem key={item.id} item={item} handleEdit={props.handleEdit} handleDelete={props.handleDelete} />\n          ))\n          }\n        </Row>\n      </Container>\n  )\n}\n\nexport default ListView\n\n\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport cuid from 'cuid';\nimport { Container, Row } from 'reactstrap';\nimport {  Form, Col, Button, FormGroup, Label, Input } from 'reactstrap';\n\nclass NewItemView extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: props.item.name,\n      detail: props.item.detail,\n    }\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    if (!this.state.name || !this.state.detail) { \n      alert(\"Please enter information, Name and Detail are required!\")\n      return}\n    this.props.handleAdd({\n      id: cuid(),\n      name: this.state.name,\n      detail: this.state.detail,\n      status: 'read'\n    })\n\n    this.setState({ name: '', detail: '' })\n    this.props.history.push('/')\n  };\n\n  handleCancel = event => {\n    this.props.history.push('/')\n  }\n\n  render() {\n    return (\n      <Container className=\"container\">\n        <Row className=\"title\">Add Item</Row>\n        <Row>\n          <Col>\n            <Form>\n              <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                <Label for=\"itemName\" className=\"mr-sm-2\">Name</Label>\n                <Input type=\"text\" name=\"name\" id=\"itemName\" placeholder=\"Item name\" value={this.state.name} onChange={this.handleInputChange} />\n              </FormGroup>\n              <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                <Label for=\"itemDetail\" className=\"mr-sm-2\">Detail</Label>\n                <Input type=\"textarea\" name=\"detail\" id=\"itemDetail\" placeholder=\"Item detail\" value={this.state.detail} onChange={this.handleInputChange} />\n              </FormGroup>\n              <Button outline color=\"success\" onClick={this.handleFormSubmit}>Save</Button>\n              <Button outline onClick={this.handleCancel}>Cancel</Button>\n            </Form>\n          </Col>\n\n        </Row>\n      </Container>\n\n    )\n  }\n\n}\n\nexport default NewItemView\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react';\nimport cuid from 'cuid';\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nimport AppHeader from './components/AppHeader'\nimport ListView from './components/ListView'\nimport NewItemView from './components/NewItemView';\nimport './App.css'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [\n      { id: cuid(), name: \"19F_MAD9132_300\", detail: 'Android Application Development', status: 'read' },\n      { id: cuid(), name: \"19F_MAD9135_300\", detail: 'Developing HTML5 Mobile Apps', status: 'read' },\n      { id: cuid(), name: \"19F_MAD9137_300\", detail: 'iOS Development', status: 'read' },\n      { id: cuid(), name: \"19F_MAD9034_300\", detail: 'User Experience Design', status: 'read' },\n      { id: cuid(), name: \"19F_ENL8720_304\", detail: 'Technical Report Writing', status: 'read' }\n    ]}\n  }\n\n  componentDidMount() {\n    // check localStorage for an array\n    let _list = localStorage.getItem('myList')\n    if (_list)\n      this.setState({ list: JSON.parse(_list) })\n    else\n      localStorage.setItem('myList', JSON.stringify(this.state.list));\n  }\n\n  buildList = (data) => {\n    this.setState({\n      list: data\n    })\n    localStorage.setItem('myList', JSON.stringify(data));\n  }\n\n  addItem = (item) => {\n\n    let newList = this.state.list.concat(item) // OR list.push(item)  add new value to the ending of the existing array\n    // this.setState({ list: [item, ...this.state.list] }) // add new value to the beginning of the existing array\n    this.buildList(newList)\n  }\n\n  editItem = (item) => {\n    if (item) {\n      let newList = this.state.list\n      const index = newList.findIndex((e) => e.id === item.id)\n      if (index !== -1) {\n        newList[index] = item\n        this.buildList(newList)\n      }\n    }\n  }\n\n  deleteItem = (targetItem) => {\n\n    // remove item in this.state.list\n    let newList = this.state.list.filter(item => item.id !== targetItem.id)\n    // Update State\n    this.buildList(newList)\n  }\n\n  render() {\n    return (\n\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <AppHeader />\n          <Switch>\n            <Route path={`/item`} render={(props) => <NewItemView {...props} handleAdd={this.addItem} item={{ name: '', detail: '' }} />} />\n            <Route exact path='/' render={(props) => <ListView {...props} items={this.state.list} handleDelete={this.deleteItem} handleEdit={this.editItem} />} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}