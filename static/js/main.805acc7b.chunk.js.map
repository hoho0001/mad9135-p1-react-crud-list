{"version":3,"sources":["components/AppHeader.js","components/FormDetail.js","components/ListItem.js","components/ListView.js","components/NewItemView.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","Jumbotron","className","to","Button","color","outline","block","NewItemView","props","handleInputChange","event","target","name","value","setState","handleFormSubmit","preventDefault","state","detail","status","alert","item","Form","FormGroup","Label","for","Input","type","id","placeholder","this","onChange","onClick","handleCancel","React","Component","ListItem","toggle","ev","handleEdit","handleDelete","window","confirm","Col","sm","Card","CardBody","CardTitle","CardText","FormDetail","ListView","Container","Row","items","map","key","handleAdd","history","push","App","buildList","data","list","localStorage","setItem","JSON","stringify","addItem","cuid","newList","concat","editItem","index","findIndex","e","deleteItem","targetItem","filter","_list","getItem","parse","basename","path","render","exact","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.805acc7b.chunk.js","sourcesContent":["// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Jumbotron, Button } from 'reactstrap';\n\nconst AppHeader = () => {\n  return (\n    <Jumbotron>\n      <h1 className=\"display-3\">React CRUD List</h1>\n      <p className=\"lead\">\n      <NavLink to='/item' className=\"App-link\"><Button  color=\"primary\" outline block={false}>Add Item</Button></NavLink>\n      </p>\n    </Jumbotron>\n  )\n}\n\nexport default AppHeader\n\n\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport { Form, Button, FormGroup, Label, Input } from 'reactstrap';\n\nclass NewItemView extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: props.item.name,\n      detail: props.item.detail\n    }\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    if (!this.state.name || !this.state.detail) {\n      alert(\"Please enter information, Name and Detail are required!\")\n      return\n    }\n    this.props.handleFormSubmit({\n      name: this.state.name,\n      detail: this.state.detail,\n      status: 'read'\n    })\n\n    this.setState({ name: '', detail: '' })\n\n  };\n\n  render() {\n    return (\n\n      <Form className='form'>\n        <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n          <Label for=\"itemName\" className=\"mr-sm-2\">Name</Label>\n          <Input type=\"text\" name=\"name\" id=\"itemName\" placeholder=\"Item name\" value={this.state.name} onChange={this.handleInputChange} />\n        </FormGroup>\n        <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n          <Label for=\"itemDetail\" className=\"mr-sm-2\">Detail</Label>\n          <Input type=\"textarea\" name=\"detail\" id=\"itemDetail\" placeholder=\"Item detail\" value={this.state.detail} onChange={this.handleInputChange} />\n        </FormGroup>\n        <Button outline color=\"success\" onClick={this.handleFormSubmit}>Save</Button>\n        <Button outline onClick={this.props.handleCancel}>Cancel</Button>\n      </Form>\n    )\n  }\n\n}\n\nexport default NewItemView\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport { Col, Card, CardText, CardBody, CardTitle, Button } from 'reactstrap';\nimport FormDetail from './FormDetail'\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: props.item.id,\n      name: props.item.name,\n      detail: props.item.detail,\n      status: props.item.status\n    }\n  }\n\n  toggle = (ev) => {\n    let item = { ...this.state }\n    item.status = (item.status === 'read') ? 'edit' : 'read'\n    this.setState({ ...item })\n  }\n\n  handleFormSubmit = event => {\n    let item = {\n      id: this.state.id,\n      name: event.name,\n      detail: event.detail,\n      status: 'read'\n    }\n    this.setState(item)\n    this.props.handleEdit(item)\n\n  };\n\n  handleCancel = event => {\n    this.setState({\n      status: 'read', name: this.props.item.name,\n      detail: this.props.item.detail,\n    })\n  }\n  handleDelete = event => {\n    if (window.confirm(\"Do you want to remove the item?\")) {\n      this.props.handleDelete(this.props.item)\n    }\n  }\n\n  render() {\n    return (\n      (this.state.status === 'read') ?\n        <Col sm='6'>\n          <Card>\n            <CardBody>\n              <CardTitle>{this.props.item.name}</CardTitle>\n              <CardText>{this.props.item.detail}</CardText>\n              <div><Button outline color=\"success\" onClick={this.toggle}>Edit</Button>\n                <Button outline color=\"danger\" onClick={this.handleDelete}>Delete</Button>\n\n              </div>\n            </CardBody>\n          </Card>\n        </Col>\n        :\n        <Col sm='6'>\n          <FormDetail item={this.state} handleCancel={this.handleCancel} handleFormSubmit={this.handleFormSubmit} />\n        </Col>\n    )\n  }\n}\n\nexport default ListItem\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport ListItem from './ListItem'\nimport { Container, Row } from 'reactstrap';\n\n\nfunction ListView(props) {\n  return (\n    <Container className=\"container\">\n      <Row>\n        {props.items && props.items.map((item) => (\n          <ListItem key={item.id} item={item} handleEdit={props.handleEdit} handleDelete={props.handleDelete} />\n        ))\n        }\n      </Row>\n    </Container>\n  )\n}\n\nexport default ListView\n\n\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react'\nimport { Container, Row, Col } from 'reactstrap';\nimport FormDetail from './FormDetail'\n\nclass NewItemView extends React.Component {\n\n  handleFormSubmit = item => {\n    this.props.handleAdd(item)\n    this.props.history.push('/')\n  };\n\n  handleCancel = event => {\n    this.props.history.push('/')\n  }\n\n  render() {\n    return (\n      <Container className=\"container\">\n        <Row className=\"title\">Add Item</Row>\n        <Row>\n          <Col>\n            <FormDetail item={{}} handleCancel={this.handleCancel} handleFormSubmit={this.handleFormSubmit} />\n          </Col>\n\n        </Row>\n      </Container>\n\n    )\n  }\n\n}\n\nexport default NewItemView\n","// Lien Ho Hoang - 2019/11/02\n\nimport React from 'react';\nimport cuid from 'cuid';\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nimport AppHeader from './components/AppHeader'\nimport ListView from './components/ListView'\nimport NewItemView from './components/NewItemView';\nimport './App.css'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [\n      { id: cuid(), name: \"19F_MAD9132_300\", detail: 'Android Application Development', status: 'read' },\n      { id: cuid(), name: \"19F_MAD9135_300\", detail: 'Developing HTML5 Mobile Apps', status: 'read' },\n      { id: cuid(), name: \"19F_MAD9137_300\", detail: 'iOS Development', status: 'read' },\n      { id: cuid(), name: \"19F_MAD9034_300\", detail: 'User Experience Design', status: 'read' },\n      { id: cuid(), name: \"19F_ENL8720_304\", detail: 'Technical Report Writing', status: 'read' }\n    ]}\n  }\n\n  componentDidMount() {\n    // check localStorage for an array\n    let _list = localStorage.getItem('myList')\n    if (_list)\n      this.setState({ list: JSON.parse(_list) })\n    else\n      localStorage.setItem('myList', JSON.stringify(this.state.list));\n  }\n\n  buildList = (data) => {\n    this.setState({\n      list: data\n    })\n    localStorage.setItem('myList', JSON.stringify(data));\n  }\n\n  addItem = (item) => {\n    item.id= cuid()\n    let newList = this.state.list.concat(item) // OR list.push(item)  add new value to the ending of the existing array\n    // this.setState({ list: [item, ...this.state.list] }) // add new value to the beginning of the existing array\n    this.buildList(newList)\n  }\n\n  editItem = (item) => {\n    if (item) {\n      let newList = this.state.list\n      const index = newList.findIndex((e) => e.id === item.id)\n      if (index !== -1) {\n        newList[index] = item\n        this.buildList(newList)\n      }\n    }\n  }\n\n  deleteItem = (targetItem) => {\n\n    // remove item in this.state.list\n    let newList = this.state.list.filter(item => item.id !== targetItem.id)\n    // Update State\n    this.buildList(newList)\n  }\n\n  render() {\n    return (\n\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <AppHeader />\n          <Switch>\n            <Route path={`/item`} render={(props) => <NewItemView {...props} handleAdd={this.addItem}  />} />\n            <Route exact path='/' render={(props) => <ListView {...props} items={this.state.list} handleDelete={this.deleteItem} handleEdit={this.editItem} />} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}